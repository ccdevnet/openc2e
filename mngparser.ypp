%{
	extern char *mngtext;
	extern void mngerror(char const *);
	#include "lex.mng.h"
	extern mngFlexLexer *mnglexer;
	int mnglex(void) { return mnglexer->yylex(); }
	#include <stdio.h>
	#include "mngfile.h"
	#include <list>
%}

%union
{
	float number;
	char *string;
	class MNGNode *node;
	class MNGExpression *expr;
	class MNGExpressionContainer *container;
	class MNGVariableNode *variable;
	std::list<class MNGNode *> *array;
}
 
%token MNG_Variable
%token MNG_Effect
%token MNG_Track
%token MNG_Stage
%token MNG_Pan
%token MNG_Volume
%token MNG_Delay
%token MNG_TempoDelay
%token MNG_Random
%token MNG_FadeIn
%token MNG_FadeOut
%token MNG_BeatLength
%token MNG_AleotoricLayer
%token MNG_LoopLayer
%token MNG_Update
%token MNG_Add
%token MNG_Subtract
%token MNG_Multiply
%token MNG_Divide
%token MNG_SineWave
%token MNG_CosineWave
%token MNG_Voice
%token MNG_Interval
%token MNG_Condition
%token MNG_BeatSynch
%token MNG_UpdateRate
%token MNG_Wave
%token <number> MNG_number
%token <string> MNG_name
%token MNG_comment

%type <container> pan effectvolume layervolume tempodelay delay fadein fadeout beatlength beatsynch updaterate
%type <node> effectdec stage stagesetting trackdec aleotoriclayerdec looplayerdec tracksetting wave effect interval variabledec updateblock voiceblock aleotoriclayercommand looplayercommand assignment voicecommand condition
%type <expr> expression add subtract multiply divide sinewave cosinewave random
%type <variable> variable
%type <array> stagelist stagesettinglist track aleotoriclayer looplayer assignmentlist voicecommands

%%

statementlist: statement { }
	| statementlist statement { }
;

statement: effectdec { g_mngfile->add($1); }
	| trackdec { g_mngfile->add($1); }
	| variabledec { g_mngfile->add($1); }
	| MNG_comment { }
;

variabledec: MNG_Variable '(' MNG_name ',' expression ')' { $$ = new MNGVariableDecNode($3, $5); }
;

effectdec: MNG_Effect '(' MNG_name ')' '{' stagelist '}' { $$ = new MNGEffectDecNode($3); ((MNGEffectDecNode *)$$)->children = $6; }
;

stagelist: stage { $$ = new std::list<MNGNode *>; $$->push_front($1); }
	| stagelist stage { $$ = $1; $$->push_front($2); }
;

stage: MNG_Stage '{' stagesettinglist '}' { $$ = new MNGStageNode(); ((MNGStageNode *)$$)->children = $3; }
	| MNG_comment { }
;

stagesettinglist: stagesetting { $$ = new std::list<MNGNode *>; $$->push_front($1); }
	| stagesettinglist stagesetting { $$ = $1; $$->push_front($2); }
;

stagesetting: pan { $$ = $1; }
	| effectvolume { $$ = $1; }
	| delay { $$ = $1; }
	| tempodelay { $$ = $1; }
	| MNG_comment { }
;

pan: MNG_Pan '(' expression ')' { $$ = new MNGPanNode($3); }
;

effectvolume: MNG_Volume '(' expression ')' { $$ = new MNGEffectVolumeNode($3); }
;

layervolume: MNG_Volume '(' expression ')' { $$ = new MNGLayerVolumeNode($3); }
;

delay: MNG_Delay '(' expression ')' { $$ = new MNGDelayNode($3); }
;

tempodelay: MNG_TempoDelay '(' expression ')' { $$ = new MNGTempoDelayNode($3); }
;

random: MNG_Random '(' expression ',' expression ')' { $$ = new MNGRandomNode($3, $5); }
;

trackdec: MNG_Track '(' MNG_name ')' '{' track '}' { $$ = new MNGTrackDecNode($3); ((MNGTrackDecNode *)$$)->children = $6; }
;

track: tracksetting { $$ = new std::list<MNGNode *>; $$->push_front($1); }
	| track tracksetting { $$ = $1; $$->push_front($2); }
;

tracksetting: aleotoriclayerdec { $$ = $1; }
	| looplayerdec { $$ = $1; }
	| fadein { $$ = $1; }
	| fadeout { $$ = $1; }
	| beatlength { $$ = $1; }
	| layervolume { $$ = $1; }
	| MNG_comment { }
;

fadein: MNG_FadeIn '(' expression ')' { $$ = new MNGFadeInNode($3); }
;

fadeout: MNG_FadeOut '(' expression ')' { $$ = new MNGFadeOutNode($3); }
;

beatlength: MNG_BeatLength '(' expression ')' { $$ = new MNGBeatLengthNode($3); }
;

aleotoriclayerdec: MNG_AleotoricLayer '(' MNG_name ')' '{' aleotoriclayer '}' { $$ = new MNGAleotoricLayerNode($3); ((MNGAleotoricLayerNode *)$$)->children = $6; }
;

looplayerdec: MNG_LoopLayer '(' MNG_name ')' '{' looplayer '}' { $$ = new MNGLoopLayerNode($3); ((MNGLoopLayerNode *)$$)->children = $6; }
;

aleotoriclayer: aleotoriclayercommand { $$ = new std::list<MNGNode *>; $$->push_front($1); }
	| aleotoriclayer aleotoriclayercommand { $$ = $1; $$->push_front($2); }
;

looplayer: looplayercommand { $$ = new std::list<MNGNode *>; $$->push_front($1); }
	| looplayer looplayercommand { $$ = $1; $$->push_front($2); }
;

aleotoriclayercommand: effect { $$ = $1; }
	| MNG_comment { }
	| layervolume { $$ = $1; }
	| variabledec { $$ = $1; }
	| updateblock { $$ = $1; }
	| voiceblock { $$ = $1; }
	| beatsynch { $$ = $1; }
	| updaterate { $$ = $1; }
	| interval { $$ = $1; }
;

looplayercommand: MNG_comment { }
	| layervolume { $$ = $1; }
	| variabledec { $$ = $1; }
	| updateblock { $$ = $1; }
	| beatsynch { $$ = $1; }
	| wave { $$ = $1; }
	| interval { $$ = $1; }
;

effect: MNG_Effect '(' MNG_name ')' { $$ = new MNGEffectNode($3); }
;

updateblock: MNG_Update '{' assignmentlist '}' { $$ = new MNGUpdateNode(); ((MNGUpdateNode *)$$)->children = $3; }
;

assignmentlist: assignment { $$ = new std::list<MNGNode *>; $$->push_front($1); }
	| assignmentlist assignment { $$ = $1; $$->push_front($2); }
;

assignment: variable '=' expression { $$ = new MNGAssignmentNode($1, $3); }
	| MNG_comment { }
;

variable: MNG_name { $$ = new MNGVariableNode($1); }
	| MNG_Interval { $$ = new MNGVariableNode(INTERVAL); }
	| MNG_Volume { $$ = new MNGVariableNode(VOLUME); }
	| MNG_Pan { $$ = new MNGVariableNode(PAN); }
;

expression: add { $$ = $1; }
	| subtract { $$ = $1; }
	| multiply { $$ = $1; }
	| divide { $$ = $1; }
	| sinewave { $$ = $1; }
	| cosinewave { $$ = $1; }
	| random { $$ = $1; }
	| variable { $$ = $1; }
	| MNG_number { $$ = new MNGConstantNode($1); }
;

add: MNG_Add '(' expression ',' expression ')' { $$ = new MNGAddNode($3, $5); }
;

subtract: MNG_Subtract '(' expression ',' expression ')' { $$ = new MNGSubtractNode($3, $5); }
;

multiply: MNG_Multiply '(' expression ',' expression ')' { $$ = new MNGMultiplyNode($3, $5); }
;

divide: MNG_Divide '(' expression ',' expression ')' { $$ = new MNGDivideNode($3, $5); }
;

sinewave: MNG_SineWave '(' expression ',' expression ')' { $$ = new MNGSineWaveNode($3, $5); }
;

cosinewave: MNG_CosineWave '(' expression ',' expression ')' { $$ = new MNGCosineWaveNode($3, $5); }
;

voiceblock: MNG_Voice '{' voicecommands '}' { $$ = new MNGVoiceNode(); ((MNGVoiceNode *)$$)->children = $3; }
;

voicecommands: voicecommand { $$ = new std::list<MNGNode *>; $$->push_front($1); }
	| voicecommands voicecommand { $$ = $1; $$->push_front($2); }
;

voicecommand: wave { $$ = $1; }
	| interval { $$ = $1; }
	| effect { $$ = $1; }
	| condition { $$ = $1; }
	| updateblock { $$ = $1; }
;

interval: MNG_Interval '(' expression ')' { $$ = new MNGIntervalNode($3); }
;

condition: MNG_Condition '(' variable ',' MNG_number ',' MNG_number ')' { $$ = new MNGConditionNode($3, $5, $7); }
;

beatsynch: MNG_BeatSynch '(' expression ')' { $$ = new MNGUpdateRateNode($3); }
;

updaterate: MNG_UpdateRate '(' expression ')' { $$ = new MNGUpdateRateNode($3); }
;

wave: MNG_Wave '(' MNG_name ')' { $$ = new MNGWaveNode($3); }
;

