#include "endianlove.h"

/*
 * perfect hash functions
 * generated by http://burtleburtle.net/bob/hash/perfect.html
 * we cast the four-char keyword into an unsigned int and then use
 * that as the input to the hash function (therefore, we need
 * different functions and tables for little and big endian)
 */

/*
 * generated from docs of Creatures Engine 2.286 (netbabel 148), 28/05/04
 */

#ifdef __C2E_BIGENDIAN

unsigned char tab_cmd[] = {
	152,0,253,0,184,0,135,0,220,0,211,0,32,0,235,0,
	0,7,0,0,0,184,0,168,82,4,0,190,0,97,116,122,
	124,85,22,0,26,7,219,0,0,0,146,0,0,0,0,0,
	0,145,0,0,0,253,190,55,0,0,32,135,12,0,26,137,
	148,0,101,0,213,120,128,0,131,0,183,0,0,0,220,0,
	0,82,127,74,214,99,0,87,190,113,0,183,0,87,0,239,
	135,0,26,0,0,0,168,0,148,0,113,225,103,0,146,0,
	0,245,0,124,206,183,6,89,0,232,0,183,0,27,0,183,
};


/* The hash function */
unsigned int phash_cmd(unsigned int val) {
  unsigned int a, b, rsl;
  val += 0x15fc1a1e;
  val ^= (val >> 16);
  val += (val << 8);
  val ^= (val >> 4);
  b = (val >> 7) & 0x7f;
  a = (val + (val << 8)) >> 25;
  rsl = (a^tab_cmd[b]);
  return rsl;
}

unsigned short tab_func[] = {
	184,243,68,0,243,162,328,154,154,0,65,13,234,264,0,154,
	0,117,6,154,174,324,169,201,146,0,157,264,0,162,117,234,
	226,65,0,0,0,243,292,154,229,28,28,319,155,155,152,2,
	258,0,28,112,0,65,0,117,154,117,249,28,160,238,378,308,
	26,23,13,62,0,155,146,275,152,136,234,0,0,243,243,0,
	23,23,256,65,0,6,230,65,28,0,260,111,345,162,311,162,
	65,3,162,162,184,6,147,154,4,0,246,204,258,162,230,43,
	194,65,108,0,373,155,0,154,237,162,0,0,230,4,54,111,
};

/* The hash function */
unsigned int phash_func(unsigned int val) {
  unsigned int a, b, rsl;
  val += 0xb0d56945;
  val ^= (val >> 16);
  val += (val << 8);
  val ^= (val >> 4);
  b = val & 0x7f;
  a = (val + (val << 7)) >> 25;
  rsl = (a^tab_func[b]);
  return rsl;
}

#else

unsigned char tab_cmd[] = {
	235,124,7,124,183,0,0,113,0,0,0,85,45,183,113,220,
	0,145,220,32,0,131,26,183,125,85,59,220,120,0,116,22,
	116,214,7,0,131,7,113,220,7,183,0,253,0,183,235,125,
	168,32,145,175,0,85,42,30,183,113,0,113,27,253,183,220,
	0,113,146,183,0,113,0,0,229,131,0,183,237,0,113,0,
	168,168,0,183,240,0,131,0,253,229,131,0,183,146,233,146,
	235,0,177,189,87,0,58,42,0,85,0,235,40,61,0,142,
	184,4,42,125,22,120,229,168,0,201,221,220,0,183,0,169,
};

/* The hash function */
unsigned int phash_cmd(unsigned int val) {
  unsigned int a, b, rsl;
  val += 0x5056344f;
  val ^= (val >> 16);
  val += (val << 8);
  val ^= (val >> 4);
  b = (val >> 8) & 0x7f;
  a = (val + (val << 7)) >> 25;
  rsl = (a^tab_cmd[b]);
  return rsl;
}

unsigned short tab_func[] = {
	243,324,65,0,112,157,243,0,3,230,0,154,0,36,184,154,
	0,65,243,328,162,243,6,234,7,65,6,174,243,28,157,157,
	65,48,0,337,36,0,28,162,23,0,345,36,161,154,234,0,
	234,155,201,0,6,162,230,324,112,3,65,112,154,0,0,155,
	234,154,36,0,6,0,6,0,211,234,62,65,243,39,234,324,
	26,174,0,28,154,26,161,329,0,161,249,264,155,243,341,344,
	234,13,0,26,249,162,161,378,238,258,65,166,65,62,171,359,
	0,167,328,184,157,174,154,154,0,28,365,159,222,111,243,369,
};

/* The hash function */
unsigned int phash_func(unsigned int val) {
  unsigned int a, b, rsl;
  val += 0xacabb6c3;
  val ^= (val >> 16);
  val += (val << 8);
  val ^= (val >> 4);
  b = (val >> 2) & 0x7f;
  a = (val + (val << 8)) >> 25;
  rsl = (a^tab_func[b]);
  return rsl;
}

#endif
